name: dynamic-library-CI

on:
#  push:
#    paths:
#      - 'rust-sdk/src/**'
  workflow_call:
  workflow_dispatch:

permissions:
  contents: write



jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Install cross
        run: cargo install cross
      - name: Build
        run: cd rust-sdk && cross build --features java --target x86_64-unknown-linux-gnu --release
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: linux_so
          path: ./rust-sdk/target/x86_64-unknown-linux-gnu/release/libzkdex_sdk.so
  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            cuda: "10.1.243"
            visual_studio: "Visual Studio 16 2019"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Install CUDA
        env:
          CUDA: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\scripts\actions\install_cuda_windows.ps1
      - name: nvcc check
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include
      - name: Build
        run: cd .\rust-sdk && cargo build --features java --release
      - name: Upload DLL
        uses: actions/upload-artifact@v3
        with:
          name: dll
          path: .\rust-sdk\target\release\zkdex_sdk.dll

  macos_x86_64:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Build
        run: |
          cd ./rust-sdk
          rustup target add x86_64-apple-darwin
          cargo build --features java  --target x86_64-apple-darwin --release
      - name: Rename
        run : |
          mv ./rust-sdk/target/x86_64-apple-darwin/release/libzkdex_sdk.dylib ./rust-sdk/target/release/libzkdex_sdk_x86_64.dylib
      - name: Upload x86_64 dylib
        uses: actions/upload-artifact@v3
        with:
          name: dylib-x86_64
          path: ./rust-sdk/target/release/libzkdex_sdk_x86_64.dylib
  macos_aarch64:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Build
        run: |
          cd ./rust-sdk
          rustup target add aarch64-apple-darwin && cargo build --features java --target aarch64-apple-darwin --release
      - name: Rename
        run: |
          mv ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk.dylib ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk_aarch64.dylib
      - name: Upload aarch64 dylib
        uses: actions/upload-artifact@v3
        with:
          name: dylib-aarch64
          path: ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk_aarch64.dylib


  collect_artifacts:
    runs-on: ubuntu-latest
    needs: [ linux, windows, macos_aarch64, macos_x86_64 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Extract version from Cargo.toml
        run: | 
          echo "CARGO_PKG_VERSION=\"$(awk -F ' = ' '$1 == "version" { gsub("\"", "", $2); print $2 }' ./rust-sdk/Cargo.toml)\"" >> $GITHUB_ENV
          echo "$CARGO_PKG_VERSION"
      - name: Remove old artifacts
        run: rm -rf java-sdk/src/main/resources/com/okx/*

      - name: Download Linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux_so
          path: java-sdk/src/main/resources/com/okx

      - name: Download Windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: dll
          path: java-sdk/src/main/resources/com/okx
      - name: Download macOS x86_64 artifacts
        uses: actions/download-artifact@v2
        with:
          name: dylib-x86_64
          path: java-sdk/src/main/resources/com/okx
      - name: Download macOS aarch64 artifacts
        uses: actions/download-artifact@v2
        with:
          name: dylib-aarch64
          path: java-sdk/src/main/resources/com/okx
      - name: Rename artifacts
        run: |
          mv java-sdk/src/main/resources/com/okx/zkdex_sdk.dll java-sdk/src/main/resources/com/okx/zkdex_sdk_x86_64_${{ env.CARGO_PKG_VERSION }}.dll
          mv java-sdk/src/main/resources/com/okx/libzkdex_sdk.so java-sdk/src/main/resources/com/okx/libzkdex_sdk_x86_64_${{ env.CARGO_PKG_VERSION }}.so
          mv java-sdk/src/main/resources/com/okx/libzkdex_sdk_x86_64.dylib java-sdk/src/main/resources/com/okx/libzkdex_sdk_x86_64_${{ env.CARGO_PKG_VERSION }}.dylib
          mv java-sdk/src/main/resources/com/okx/libzkdex_sdk_aarch64.dylib java-sdk/src/main/resources/com/okx/libzkdex_sdk_aarch64_${{ env.CARGO_PKG_VERSION }}.dylib
      - name: Record Version
        run: echo $CARGO_PKG_VERSION > java-sdk/src/main/resources/com/okx/version.txt
      - name: zip java-sdk
        run: zip -r java-sdk.zip java-sdk
      - name: Upload java sdk to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: java-sdk.zip
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}

#      - name: Commit and push changes
#        run: |
#          git config user.name "${{ github.actor }}"
#          git config user.email "${{ github.actor }}@users.noreply.github.com"
#          git add .
#          git commit -m "Auto-generated build artifacts"
#          git push