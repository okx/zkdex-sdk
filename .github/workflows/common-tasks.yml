name: Common Tasks
on:
  workflow_call:
    inputs:
      binary_names:
        required: true
        type: array
      upload_url:
        required: true
        type: string
jobs:
  build_so:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Install cross
        run: cargo install cross
      - name: Build
        run: cd rust-sdk && cross build --features java --target x86_64-unknown-linux-gnu --release
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: linux_so
          path: ./rust-sdk/target/x86_64-unknown-linux-gnu/release/libzkdex_sdk.so
  build_dll:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            cuda: "10.1.243"
            visual_studio: "Visual Studio 16 2019"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Install CUDA
        env:
          CUDA: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\scripts\actions\install_cuda_windows.ps1
      - name: nvcc check
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include
      - name: Build
        run: cd .\rust-sdk && cargo build --features java --release
      - name: Upload DLL
        uses: actions/upload-artifact@v3
        with:
          name: dll
          path: .\rust-sdk\target\release\zkdex_sdk.dll

  build_x86_64_dylib:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Build
        run: |
          cd ./rust-sdk
          rustup target add x86_64-apple-darwin
          cargo build --features java  --target x86_64-apple-darwin --release
      - name: Rename
        run: |
          mv ./rust-sdk/target/x86_64-apple-darwin/release/libzkdex_sdk.dylib ./rust-sdk/target/release/libzkdex_sdk_x86_64.dylib
      - name: Upload x86_64 dylib
        uses: actions/upload-artifact@v3
        with:
          name: dylib-x86_64
          path: ./rust-sdk/target/release/libzkdex_sdk_x86_64.dylib
  build_aarch64_dylib:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Build
        run: |
          cd ./rust-sdk
          rustup target add aarch64-apple-darwin && cargo build --features java --target aarch64-apple-darwin --release
      - name: Rename
        run: |
          mv ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk.dylib ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk_aarch64.dylib
      - name: Upload aarch64 dylib
        uses: actions/upload-artifact@v3
        with:
          name: dylib-aarch64
          path: ./rust-sdk/target/aarch64-apple-darwin/release/libzkdex_sdk_aarch64.dylib
  build_js_sdk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: '1.70.0'
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install wasm-pack
        run: cargo install wasm-pack@0.10.2
      - name: Build
        run: cd rust-sdk && npm run build
      - name: zip js-sdk
        run: zip -r js-sdk.zip javascript-sdk
      - name: Upload js-sdk
        uses: actions/upload-artifact@v3
        with:
          name: js-sdk
          path: js-sdk.zip
  upload_assets:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Upload Release Assets
        run: |
          for file in ${{ inputs.binary_names }}; do
            gh release upload "${{ inputs.upload_url }}" "target/$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}